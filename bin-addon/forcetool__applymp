#!/usr/bin/env python2

import os,sys
import math as M
import numpy as np

# COLUMN       0    1   2    3     4     *  6      7      8         9   * 11     12     13
# FORMAT "     atom %4d type %2d   force =  %13.8f %13.8f %13.8f   ,err = %13.8f %13.8f %13.8f\n" % ( atom_acc, species_acc, forcex, forcey, forcez, errx, erry, errz )

if len(sys.argv)!=5:
  sys.stderr.write('Usage: forcetool__applymp <OLD_POSCAR> <FORCES> <multiplier> <NEW_POSCAR>\n')
  sys.stderr.write('       OLD_POSCAR and NEW_POSCAR need to be in general VASP-POSCAR format.\n')
  sys.stderr.write('       FORCES need to be in forcetool__ standard format.\n')
  sys.stderr.write('IMPORTANT NOTE: <multiplier> is dimensionless (unit=1), not "1/alat".\n')
  exit()
fpos=open(sys.argv[1],'r')
ffce=open(sys.argv[2],'r')
multiplier=float(sys.argv[3])
fout=open(sys.argv[4],'w')

# BaTiO3_cubic_Ti-001-shifted
#    7.627812
#   1.000000000000   0.000000000000   0.000000000000
#   0.000000000000   1.000000000000   0.000000000000
#   0.000000000000   0.000000000000   1.000000000000
#   Ba   Ti    O
#    1    1    3
# Direct
#   0.0000000000000000   0.0000000000000000   0.0000000000000000  Ba
#   0.5000000000000000   0.5000000000000000   0.5200000000000000  Ti
#   0.0000000000000000   0.5000000000000000   0.5000000000000000  O
#   0.5000000000000000   0.0000000000000000   0.5000000000000000  O
#   0.5000000000000000   0.5000000000000000   0.0000000000000000  O

posname = fpos.readline().split()[0]
alat = float(fpos.readline().split()[0])

# Set up lattice
avec = np.matrix(np.zeros((3,3)))
for ii in range(3):
  l = fpos.readline().split()
  for ij in range(3):
    avec[ii,ij]=float(l[ij])
bvec = np.matrix(np.zeros((3,3)))
bvec[0,:]=np.cross( avec[1,:].A1, avec[2,:].A1 )
bvec[1,:]=np.cross( avec[2,:].A1, avec[0,:].A1 )
bvec[2,:]=np.cross( avec[0,:].A1, avec[1,:].A1 )
omega = np.dot( avec[0,:].A1, bvec[0,:].A1 )
bvec[:,:]=bvec[:,:]/omega * 2.0*M.pi

eleml = fpos.readline() # Elements
acntl = fpos.readline() # Atom Count
ltypl = fpos.readline() # Lattice Type "Direct"
l = acntl.split() # Atom Count
totat = sum([int(nat) for nat in l]) # total number of atoms

# Set up atom configurations
posat = np.zeros((totat,3))
atname = []
for iat in range(totat):
  l = fpos.readline().split()
  for ij in range(3):
    posat[iat,ij]=float(l[ij])
  atname.append( l[3] )
fpos.close()

# Read forces
fceat = np.zeros((totat,3))
for iat in range(totat):
  l = ffce.readline().split()
  for ij in range(3):
    fceat[iat,ij]=float(l[6+ij]) 
ffce.close()

# Calculate shift ( multiplier not used )
sftat = np.zeros((totat,3))
for iat in range(totat):
  for ij in range(3):
    sftat[iat,ij]=sum(fceat[iat,:]*np.transpose(bvec)[:,ij])/(2.0*M.pi)/alat
    #                    ******       ^ TRANPOSE WAS NOT HERE. THAT'S WRONG! avec.(bvec)^T=2pi*I so if x_Cart=[avec].x_Crys, x_Crys=[bvec^T/2pi].x_Cart

# Apply shift ( * multiplier )
for iat in range(totat):
  for ij in range(3):
    posat[iat,ij] += sftat[iat,ij] * multiplier

fout.write('%s\n' % posname)
fout.write(' %10.6f\n' % alat)
fout.write('%16.12f %16.12f %16.12f\n' % (avec[0,0], avec[0,1], avec[0,2]))
fout.write('%16.12f %16.12f %16.12f\n' % (avec[1,0], avec[1,1], avec[1,2]))
fout.write('%16.12f %16.12f %16.12f\n' % (avec[2,0], avec[2,1], avec[2,2]))
fout.write('%s' % eleml)
fout.write('%s' % acntl)
fout.write('%s' % ltypl)
for iat in range(totat):
  fout.write('%20.16f %20.16f %20.16f  %s\n' % (posat[iat,0], posat[iat,1], posat[iat,2], atname[iat]) )
fout.close()
